import React, { useState, useRef } from 'react';
import { 
  PlusIcon, 
  TrophyIcon, 
  DocumentCheckIcon,
  XMarkIcon,
  PencilIcon,
  TrashIcon,
  CheckIcon,
  ArrowUpTrayIcon
} from '@heroicons/react/24/outline';

// Reusable components
const LoadingSpinner = ({ inline = false, small = false }) => (
  <svg 
    className={`animate-spin ${inline ? 'inline' : ''} ${small ? 'h-4 w-4' : 'h-5 w-5'} ${inline ? 'mr-2 -ml-1' : ''}`} 
    xmlns="http://www.w3.org/2000/svg" 
    fill="none" 
    viewBox="0 0 24 24"
  >
    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
  </svg>
);

// File Upload Component
const FileUploadArea = ({ filePreview, onChange, accept = "image/*", label = "Upload File" }) => {
  const fileInputRef = useRef(null);
  
  return (
    <div className="mt-4">
      <label className="block text-sm font-medium text-gray-700 mb-2">{label}</label>
      <div 
        onClick={() => fileInputRef.current.click()}
        className={`border-2 border-dashed rounded-lg p-4 flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors ${
          filePreview ? 'border-gray-300' : 'border-gray-200'
        }`}
      >
        {filePreview ? (
          <div className="relative w-full">
            <img 
              src={filePreview} 
              alt="Preview" 
              className="w-full h-64 object-contain rounded-lg"
            />
            <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-40 opacity-0 hover:opacity-100 rounded-lg transition-opacity">
              <p className="text-white text-sm">Click to change</p>
            </div>
          </div>
        ) : (
          <div className="text-center">
            <ArrowUpTrayIcon className="w-8 h-8 mx-auto text-gray-400" />
            <p className="mt-2 text-sm text-gray-500">Click to upload or drag and drop</p>
            <p className="text-xs text-gray-400 mt-1">PNG, JPG, GIF up to 5MB</p>
          </div>
        )}
        <input
          ref={fileInputRef}
          type="file"
          accept={accept}
          onChange={onChange}
          className="hidden"
        />
      </div>
    </div>
  );
};

// Confirmation Modal Component
const ConfirmationModal = ({ isOpen, onCancel, onConfirm, title, message, isDeleting }) => {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-11/12 max-w-md">
        <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
        <p className="my-4 text-gray-600">{message}</p>
        <div className="flex justify-end space-x-3">
          <button
            onClick={onCancel}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            disabled={isDeleting}
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:bg-red-400"
          >
            {isDeleting ? (
              <>
                <LoadingSpinner inline small />
                Deleting...
              </>
            ) : (
              "Delete"
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

const AchievementsTab = ({ profileData, updateProfileData, formStyles }) => {
  // Unified state management
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [feedback, setFeedback] = useState({ message: '', isSuccess: true, show: false });
  
  // Certificates state
  const [certifications, setCertifications] = useState(profileData?.certifications || []);
  const [isAddingCert, setIsAddingCert] = useState(false);
  const [newCertification, setNewCertification] = useState({
    name: '',
    issuer: '',
    date: '',
    credentialId: '',
    fileUrl: ''
  });
  const [editingCert, setEditingCert] = useState(null);
  const [showDeleteCertModal, setShowDeleteCertModal] = useState(false);
  const [certToDelete, setCertToDelete] = useState(null);

  // Achievements state
  const [achievements, setAchievements] = useState(profileData?.achievements || []);
  const [isAddingAchievement, setIsAddingAchievement] = useState(false);
  const [newAchievement, setNewAchievement] = useState({
    title: '',
    description: '',
    date: '',
    imageUrl: ''
  });
  const [editingAchievement, setEditingAchievement] = useState(null);
  const [showDeleteAchievementModal, setShowDeleteAchievementModal] = useState(false);
  const [achievementToDelete, setAchievementToDelete] = useState(null);

  // Feedback handling
  const showFeedback = (message, isSuccess = true) => {
    setFeedback({ message, isSuccess, show: true });
    
    // Clear feedback after 3 seconds
    setTimeout(() => {
      setFeedback(prev => ({ ...prev, show: false }));
    }, 3000);
  };

  // Update parent component with new data
  const updateParentData = (certData, achieveData) => {
    console.log('Updating parent data with new certifications:', certData);
    console.log('Updating parent data with new achievements:', achieveData);
    
    const updatedProfileData = {
      ...profileData,
      certifications: certData !== null ? certData : certifications,
      achievements: achieveData !== null ? achieveData : achievements
    };
    
    console.log('Sending updated profile data to parent:', updatedProfileData);
    
    // Update the parent component
    updateProfileData(updatedProfileData);
  };

  // ===== Certificate Handlers =====
  
  const handleCertChange = (e) => {
    const { name, value } = e.target;
    setNewCertification(prev => ({ ...prev, [name]: value }));
  };
  
  const handleEditCertChange = (e) => {
    const { name, value } = e.target;
    setEditingCert(prev => ({ ...prev, [name]: value }));
  };
  
  const handleCertFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const fileReader = new FileReader();
      
      fileReader.onload = (event) => {
        const fileUrl = event.target.result;
        
        if (editingCert) {
          setEditingCert(prev => ({ ...prev, fileUrl }));
        } else {
          setNewCertification(prev => ({ ...prev, fileUrl }));
        }
      };
      
      fileReader.readAsDataURL(file);
    }
  };

  const handleAddCertification = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Create a new certification with a timestamp-based ID
      const newCert = {
        id: Date.now().toString(),
        ...newCertification
      };
      
      console.log('Adding new certification:', newCert);
      
      // Create a new array with the added certification
      const updatedCerts = [...certifications, newCert];
      
      // Update local state
      setCertifications(updatedCerts);
      
      // Update parent with complete data
      const updatedProfileData = {
        ...profileData,
        certifications: updatedCerts,
        achievements: achievements
      };
      
      console.log('Updating profile data with new certification:', updatedProfileData);
      updateProfileData(updatedProfileData);
      
      // Reset form
      setNewCertification({
        name: '',
        issuer: '',
        date: '',
        credentialId: '',
        fileUrl: ''
      });
      
      setIsAddingCert(false);
      showFeedback('Certificate added successfully!', true);
    } catch (error) {
      console.error('Error adding certification:', error);
      showFeedback('Failed to add certificate. Please try again.', false);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEditCert = (cert) => {
    setEditingCert(cert);
    setIsAddingCert(false);
  };

  const handleSaveCert = async (e) => {
    e.preventDefault();
    if (!editingCert || !editingCert.id) {
      console.error("No certification selected for editing or invalid ID");
      showFeedback('Failed to update certification. No valid ID found.', false);
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log('Saving edited certification:', editingCert);
      
      // Create a new array with updated items
      const updatedCerts = certifications.map(cert => 
        cert.id === editingCert.id ? editingCert : cert
      );
      
      // Update local state first
      setCertifications(updatedCerts);
      
      // Update parent with complete data
      const updatedProfileData = {
        ...profileData,
        certifications: updatedCerts,
        achievements: achievements
      };
      
      console.log('Updating profile data with edited certification:', updatedProfileData);
      updateProfileData(updatedProfileData);
      
      setEditingCert(null);
      showFeedback('Certificate updated successfully!', true);
    } catch (error) {
      console.error('Error updating certification:', error);
      showFeedback('Failed to update certificate. Please try again.', false);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleConfirmDeleteCert = async () => {
    if (!certToDelete || !certToDelete.id) {
      console.error("No certification selected for deletion or invalid ID");
      showFeedback('Failed to delete certification. No valid ID found.', false);
      return;
    }
    
    setIsDeleting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Log the specific certification being deleted
      console.log('Attempting to delete certification:', certToDelete);
      
      // Create a fully new array with only the items we want to keep
      let updatedCerts = [];
      
      // Add all certifications EXCEPT the one being deleted
      certifications.forEach(cert => {
        if (cert.id !== certToDelete.id) {
          updatedCerts.push(cert);
        } else {
          console.log('Excluding certification from new array:', cert);
        }
      });
      
      console.log(`Updated certifications (${updatedCerts.length} of ${certifications.length} remain):`, updatedCerts);
      
      // Update the local state first
      setCertifications(updatedCerts);
      
      // Create completely new profile data object
      const updatedProfileData = {
        ...profileData,
        certifications: updatedCerts,
        // Keep other sections unchanged
        achievements: achievements
      };
      
      console.log('Complete updated profile data:', updatedProfileData);
      
      // Update the parent directly with full object to avoid any reference issues
      updateProfileData(updatedProfileData);
      
      showFeedback('Certificate deleted successfully!', true);
    } catch (error) {
      console.error('Error deleting certification:', error);
      showFeedback('Failed to delete certificate. Please try again.', false);
    } finally {
      setIsDeleting(false);
      setShowDeleteCertModal(false);
      setCertToDelete(null);
    }
  };

  // ===== Achievement Handlers =====
  
  const handleAchievementChange = (e) => {
    const { name, value } = e.target;
    setNewAchievement(prev => ({ ...prev, [name]: value }));
  };

  const handleEditAchievementChange = (e) => {
    const { name, value } = e.target;
    setEditingAchievement(prev => ({ ...prev, [name]: value }));
  };

  const handleAchievementFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const fileReader = new FileReader();
      
      fileReader.onload = (event) => {
        const imageUrl = event.target.result;
        
        if (editingAchievement) {
          setEditingAchievement(prev => ({ ...prev, imageUrl }));
        } else {
          setNewAchievement(prev => ({ ...prev, imageUrl }));
        }
      };
      
      fileReader.readAsDataURL(file);
    }
  };

  const handleAddAchievement = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const newAchieve = {
        id: Date.now().toString(),
        ...newAchievement
      };
      
      const updatedAchievements = [...achievements, newAchieve];
      setAchievements(updatedAchievements);
      updateParentData(null, updatedAchievements);
      
      // Reset form
      setNewAchievement({
        title: '',
        description: '',
        date: '',
        imageUrl: ''
      });
      
      setIsAddingAchievement(false);
      showFeedback('Achievement added successfully!', true);
    } catch (error) {
      console.error('Error adding achievement:', error);
      showFeedback('Failed to add achievement. Please try again.', false);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEditAchievement = (achievement) => {
    setEditingAchievement(achievement);
    setIsAddingAchievement(false);
  };

  const handleSaveAchievement = async (e) => {
    e.preventDefault();
    if (!editingAchievement) return;
    
    setIsSubmitting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Debug
      console.log('Saving achievement with ID:', editingAchievement.id);
      
      const updatedAchievements = achievements.map(achievement => 
        achievement.id === editingAchievement.id ? editingAchievement : achievement
      );
      
      // Set state locally first
      setAchievements(updatedAchievements);
      
      // Then update parent data
      updateParentData(null, updatedAchievements);
      setEditingAchievement(null);
      showFeedback('Achievement updated successfully!', true);
    } catch (error) {
      console.error('Error updating achievement:', error);
      showFeedback('Failed to update achievement. Please try again.', false);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleConfirmDeleteAchievement = async () => {
    if (!achievementToDelete || !achievementToDelete.id) {
      console.error("No achievement selected for deletion or invalid ID");
      showFeedback('Failed to delete achievement. No valid ID found.', false);
      return;
    }
    
    setIsDeleting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Log the specific achievement being deleted
      console.log('Attempting to delete achievement:', achievementToDelete);
      
      // Create a fully new array with only the items we want to keep
      let updatedAchievements = [];
      
      // Add all achievements EXCEPT the one being deleted
      achievements.forEach(achievement => {
        if (achievement.id !== achievementToDelete.id) {
          updatedAchievements.push(achievement);
        } else {
          console.log('Excluding achievement from new array:', achievement);
        }
      });
      
      console.log(`Updated achievements (${updatedAchievements.length} of ${achievements.length} remain):`, updatedAchievements);
      
      // Update the local state first
      setAchievements(updatedAchievements);
      
      // Create completely new profile data object
      const updatedProfileData = {
        ...profileData,
        achievements: updatedAchievements,
        // Keep other sections unchanged
        certifications: certifications
      };
      
      console.log('Complete updated profile data:', updatedProfileData);
      
      // Update the parent directly with full object to avoid any reference issues
      updateProfileData(updatedProfileData);
      
      showFeedback('Achievement deleted successfully!', true);
    } catch (error) {
      console.error('Error deleting achievement:', error);
      showFeedback('Failed to delete achievement. Please try again.', false);
    } finally {
      setIsDeleting(false);
      setShowDeleteAchievementModal(false);
      setAchievementToDelete(null);
    }
  };

  return (
    <div className="py-6 relative">
      {/* Feedback toast notification */}
      {feedback.show && (
        <div className={`fixed bottom-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transform transition-all duration-500 ease-in-out ${
          feedback.isSuccess ? 'bg-green-50 text-green-800 border border-green-200' : 'bg-red-50 text-red-800 border border-red-200'
        } animate-fade-in-up`}>
          <div className="flex items-center">
            {feedback.isSuccess ? (
              <CheckIcon className="w-5 h-5 mr-2 text-green-500" />
            ) : (
              <XMarkIcon className="w-5 h-5 mr-2 text-red-500" />
            )}
            <p>{feedback.message}</p>
          </div>
        </div>
      )}

      {/* =============== CERTIFICATIONS SECTION =============== */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold text-gray-800 flex items-center">
            <DocumentCheckIcon className="w-6 h-6 mr-2 text-blue-500" />
            Certifications
          </h2>
          {!isAddingCert && !editingCert && (
            <button
              type="button"
              onClick={() => {
                setIsAddingCert(true);
                setEditingCert(null);
                setNewCertification({
                  name: '',
                  issuer: '',
                  date: '',
                  credentialId: '',
                  fileUrl: ''
                });
              }}
              className="flex items-center text-sm text-blue-600 hover:text-blue-800"
            >
              <PlusIcon className="w-5 h-5 mr-1" />
              Add Certification
            </button>
          )}
        </div>

        {/* Add or Edit Certification Form */}
        {(isAddingCert || editingCert) && (
          <form 
            onSubmit={editingCert ? handleSaveCert : handleAddCertification}
            className="bg-white p-6 rounded-lg shadow-md mb-6 border border-gray-200"
          >
            <h3 className="text-lg font-medium mb-4">
              {editingCert ? 'Edit Certification' : 'Add New Certification'}
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Certificate Name
                </label>
                <input
                  type="text"
                  name="name"
                  value={editingCert ? editingCert.name : newCertification.name}
                  onChange={editingCert ? handleEditCertChange : handleCertChange}
                  className={formStyles.input}
                  required
                  placeholder="Enter certificate name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Issuing Organization
                </label>
                <input
                  type="text"
                  name="issuer"
                  value={editingCert ? editingCert.issuer : newCertification.issuer}
                  onChange={editingCert ? handleEditCertChange : handleCertChange}
                  className={formStyles.input}
                  required
                  placeholder="Enter issuing organization"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Issue Date
                </label>
                <input
                  type="date"
                  name="date"
                  value={editingCert ? editingCert.date : newCertification.date}
                  onChange={editingCert ? handleEditCertChange : handleCertChange}
                  className={formStyles.input}
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Credential ID
                </label>
                <input
                  type="text"
                  name="credentialId"
                  value={editingCert ? editingCert.credentialId : newCertification.credentialId}
                  onChange={editingCert ? handleEditCertChange : handleCertChange}
                  className={formStyles.input}
                  placeholder="Enter credential ID (optional)"
                />
              </div>
            </div>

            {/* Certificate File/Image */}
            <div className="mt-4">
              <FileUploadArea 
                filePreview={editingCert ? editingCert.fileUrl : newCertification.fileUrl}
                onChange={handleCertFileChange}
                label="Certificate Image"
                accept="image/*"
              />
            </div>

            <div className="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => {
                  setIsAddingCert(false);
                  setEditingCert(null);
                }}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-blue-400"
              >
                {isSubmitting ? (
                  <>
                    <LoadingSpinner inline small />
                    {editingCert ? 'Saving...' : 'Adding...'}
                  </>
                ) : (
                  <>{editingCert ? 'Save Changes' : 'Add Certification'}</>
                )}
              </button>
            </div>
          </form>
        )}

        {/* Certifications List */}
        {certifications.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {certifications.map(cert => (
              <div 
                key={cert.id} 
                className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow"
              >
                <div className="relative h-48">
                  <img
                    src={cert.fileUrl}
                    alt={cert.name}
                    className="w-full h-full object-contain bg-gray-50"
                  />
                  <div className="absolute top-2 right-2 flex space-x-2">
                    <button
                      type="button"
                      onClick={() => {
                        setEditingCert(cert);
                        setIsAddingCert(false);
                      }}
                      className="text-sm text-blue-600 hover:text-blue-800 mr-2"
                    >
                      Edit
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setCertToDelete(cert);
                        setShowDeleteCertModal(true);
                      }}
                      className="text-sm text-red-600 hover:text-red-800"
                    >
                      Delete
                    </button>
                  </div>
                </div>
                <div className="p-4">
                  <h3 className="text-lg font-semibold text-gray-800 mb-2">{cert.name}</h3>
                  <p className="text-sm text-gray-600">{cert.issuer}</p>
                  <p className="text-sm text-gray-600">{cert.date}</p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* =============== ACHIEVEMENTS SECTION =============== */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold text-gray-800 flex items-center">
            <TrophyIcon className="w-6 h-6 mr-2 text-yellow-500" />
            Achievements
          </h2>
          {!isAddingAchievement && !editingAchievement && (
            <button
              type="button"
              onClick={() => {
                setIsAddingAchievement(true);
                setEditingAchievement(null);
                setNewAchievement({
                  title: '',
                  description: '',
                  date: '',
                  imageUrl: ''
                });
              }}
              className="flex items-center text-sm text-yellow-600 hover:text-yellow-800"
            >
              <PlusIcon className="w-5 h-5 mr-1" />
              Add Achievement
            </button>
          )}
        </div>

        {/* Add or Edit Achievement Form */}
        {(isAddingAchievement || editingAchievement) && (
          <form 
            onSubmit={editingAchievement ? handleSaveAchievement : handleAddAchievement}
            className="bg-white p-6 rounded-lg shadow-md mb-6 border border-gray-200"
          >
            <h3 className="text-lg font-medium mb-4">
              {editingAchievement ? 'Edit Achievement' : 'Add New Achievement'}
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Achievement Title
                </label>
                <input
                  type="text"
                  name="title"
                  value={editingAchievement ? editingAchievement.title : newAchievement.title}
                  onChange={editingAchievement ? handleEditAchievementChange : handleAchievementChange}
                  className={formStyles.input}
                  required
                  placeholder="Enter achievement title"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Description
                </label>
                <textarea
                  name="description"
                  value={editingAchievement ? editingAchievement.description : newAchievement.description}
                  onChange={editingAchievement ? handleEditAchievementChange : handleAchievementChange}
                  className={formStyles.input}
                  required
                  placeholder="Enter achievement description"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Date
                </label>
                <input
                  type="date"
                  name="date"
                  value={editingAchievement ? editingAchievement.date : newAchievement.date}
                  onChange={editingAchievement ? handleEditAchievementChange : handleAchievementChange}
                  className={formStyles.input}
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Image URL
                </label>
                <input
                  type="text"
                  name="imageUrl"
                  value={editingAchievement ? editingAchievement.imageUrl : newAchievement.imageUrl}
                  onChange={editingAchievement ? handleEditAchievementChange : handleAchievementChange}
                  className={formStyles.input}
                  placeholder="Enter image URL (optional)"
                />
              </div>
            </div>

            {/* Achievement File/Image */}
            <div className="mt-4">
              <FileUploadArea 
                filePreview={editingAchievement ? editingAchievement.imageUrl : newAchievement.imageUrl}
                onChange={handleAchievementFileChange}
                label="Achievement Image"
                accept="image/*"
              />
            </div>

            <div className="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => {
                  setIsAddingAchievement(false);
                  setEditingAchievement(null);
                }}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors disabled:bg-yellow-400"
              >
                {isSubmitting ? (
                  <>
                    <LoadingSpinner inline small />
                    {editingAchievement ? 'Saving...' : 'Adding...'}
                  </>
                ) : (
                  <>{editingAchievement ? 'Save Changes' : 'Add Achievement'}</>
                )}
              </button>
            </div>
          </form>
        )}

        {/* Achievements List */}
        {achievements.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {achievements.map(achievement => (
              <div 
                key={achievement.id} 
                className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow"
              >
                <div className="relative h-48">
                  <img
                    src={achievement.imageUrl}
                    alt={achievement.title}
                    className="w-full h-full object-contain bg-gray-50"
                  />
                </div>
                <div className="p-4">
                  <h3 className="text-lg font-semibold text-gray-800 mb-2">{achievement.title}</h3>
                  <p className="text-sm text-gray-600">{achievement.description}</p>
                  <p className="text-sm text-gray-600">{achievement.date}</p>
                  <div className="mt-2">
                    <button
                      type="button"
                      onClick={() => {
                        setEditingAchievement(achievement);
                        setIsAddingAchievement(false);
                      }}
                      className="text-sm text-yellow-600 hover:text-yellow-800 mr-2"
                    >
                      Edit
                    </button>
                    <button
                      type="button"
                      onClick={() => {
                        setAchievementToDelete(achievement);
                        setShowDeleteAchievementModal(true);
                      }}
                      className="text-sm text-red-600 hover:text-red-800"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

                <div className="relative h-